/* Copyright Statement:
 *
 * (C) 2005-2017 MediaTek Inc. All rights reserved.
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its
 * licensors. Without the prior written permission of MediaTek and/or its
 * licensors, any reproduction, modification, use or disclosure of MediaTek
 * Software, and information contained herein, in whole or in part, shall be
 * strictly prohibited. You may only use, reproduce, modify, or distribute
 * (as applicable) MediaTek Software if you have agreed to and been bound by
 * the applicable license agreement with MediaTek ("License Agreement") and
 * been granted explicit permission to do so within the License Agreement
 * ("Permitted User"). If you are not a Permitted User, please cease any
 * access or use of MediaTek Software immediately.
 */

/**
 * @addtogroup mt7697_hdk mt7697_hdk
 * @{
 * @addtogroup mt7697_hdk_apps apps
 * @{
 * @addtogroup mt7697_hdk_apps_iot_sdk_demo iot_sdk_demo
 * @{
 
@par Overview
  - Application description
    - This is a reference application to demonstrate Bluetooth, Wi-Fi
      connectivity. Demo for BLE and WiFi bridge.
    - And all feature of the LinkIt 7697 HDK
      through the following:
      - How to use the Wi-Fi profile settings stored in the NVDM to
        initialize the Wi-Fi.
      - How to use the tickless feature to achieve low power consumption.
      - How to use the Bluetooth functions.
  - Application features
    - Act as a Wi-Fi station to connect to a Wi-Fi network.
    - Act as a Wi-Fi AP to accept connection to the LinkIt 7697 HDK from a
      handheld device or a laptop computer.
    - Outbound ping from the device or inbound ping to the device.
    - All Wi-Fi Command Line Interface (CLI) commands are supported in this
      project.
    - Act as a Bluetooth low energy (LE) device. All Bluetooth Command Line
      Interface (CLI) commands are supported in this project.

@par Hardware and software environment
  - Supported platform
    - MediaTek LinkIt 7697 HDK.
  - HDK switches and pin configuration
    - J36 provides the pins for GPIOs, PWMs, SPI master chip select 0, SPI
      master, UART1 RX/TX.
    - J35 provides the pins for GPIOs, PWMs, UART2 RX/TX, UART1 RTS/CTS, SPI
      master chip select 1, IR TX and IR RX.
    - J34 provides the pins for GPIOs, PWMs, UART2 RTS/CTS, I2S, SPI slave,
      and I2C0.
    - J33 provides the pins for GPIOs, PWMs, I2C0, ADC0~3.
    - J32 provides the pins for GND, 5V, 3.3V and reset pin.
    - J25 sets the HDK to either Flash Normal mode or Flash Recovery mode. To
      update the firmware on the LinkIt 7697 HDK:
      - Set the jumper J25 to FLASH Recovery mode, the jumpers J23, J26, J27
        and J30 should be on.
      - In this mode, if the power is on, the board will load ROM code and
        start the ATE Daemon or Firmware Upgrade Daemon according to the
        MT76x7 Flash Tool's behavior on the PC. To run the project on the
        LinkIt 7697 HDK:
      - Set the jumper J25 off to switch to FLASH Normal mode, the jumpers
        J23, J26, J27 and J30 should be on.
      - In this mode, if the power is on, the board will load firmware from
        the flash and reboot.
    - There are three buttons on the board:
      - RST - reset.
      - EINT - external interrupt.
      - RTC_INT - RTC interrupt.
  - Environment configuration
    - A serial tool is required, such as TeraTerm for UART logging.
    - COM port settings. baudrate: 115200, data bits: 8, stop bit: 1, parity:
      none and flow control: off.

@par Directory contents
  - This file
    - \b readme.txt.                Overview of the project.
  - Source and header files
    - \b src/ble_smtcn_app.c:     Receive the SSID, password and security mode
                                  from an Android application through Bluetooth
                                  LE connection, and then connect to the Wi-Fi
                                  AP.
    - \b src/bt_init.c:           Bluetooth memory initialization and task
                                  creation.
    - \b src/cli_cmds.c:          CLI commands of this project.
    - \b src/cli_def.c:           CLI initialization sequence code.
    - \b src/ept_eint_var.c:      EINT configuration file generated by Easy
                                  Pinmux Tool (EPT). Please do not modify the
                                  file.
    - \b src/ept_gpio_var.c:      GPIO configuration file generated by Easy
                                  Pinmux Tool (EPT). Please do not modify the
                                  file.
    - \b src/hci_log.c:           Bluetooth HCI log file. The user must
                                  initiate the UART port for HCI logging.
    - \b src/main.c:              Entry point of the application program.
    - \b src/sys_init.c:          Aggregated initialization routines.
    - \b src/system_mt7687.c:     MT7697 system clock configuration file.
    - \b src/wifi_lwip_helper.c:  lwIP configuration.
    - \b src/wifi_nvdm_config.c:  Default user configuration file.
    - \b src/ut_app/.:            Bluetooth CLI command handler.
    - \b inc/ble_smtcn_app.h:     Declare the API for smart connection.
    - \b inc/bt_init.h:           Declare the Bluetooth task create API.
    - \b inc/bt_lwip.h:           Create socket and send data by using the lwIP
                                  API to test the Wi-Fi part for Wi-Fi and
                                  Bluetooth coexistence cases.
    - \b inc/cli_cmds.h:          Declares the reference point of CLI commands
                                  of cli_cmds.c. To be used by cli_def.c.
    - \b inc/default_config.h:    Default user configuration.
    - \b inc/ept_eint_drv.h:      The EINT configuration file generated by Easy
                                  Pinmux Tool (EPT). Please do not modify the
                                  file.
    - \b inc/ept_gpio_drv.h:      The GPIO configuration file generated by Easy
                                  Pinmux Tool (EPT). Please do not modify the
                                  file.
    - \b inc/flash_map.h:         MT7697 memory layout symbol file.
    - \b inc/FreeRTOSConfig.h:    MT7697 FreeRTOS configuration file.
    - \b inc/task_def.h:          Define the task stack size, queue length,
                                  project name, and priority for the
                                  application to create tasks.
    - \b inc/hal_feature_config.h:
                                  MT7697 HAL API feature configuration file.
    - \b inc/hci_log.h:           Declare the Bluetooth HCI log API.
    - \b inc/lwipopts.h:          lwIP configuration.
    - \b inc/project_config.h:    Define the maximum number of Bluetooth
                                  connections and timer. And define the buffer
                                  size of the TX/RX, timer and connection.
    - \b inc/sys_init.h:          Prototype declaration for
    - \b inc/task_def.h:          The configuration of running tasks of the
                                  project.
    - \b inc/wifi_lwip_helper.h:  Prototype declaration for
    - \b inc/wifi_nvdm_config.h:  Prototype declaration for default user
                                  configuration file.
  - Project configuration files using GCC.
    - \b GCC/Makefile.:         GNU Makefile for this project.
    - \b GCC/feature.mk:        Generic feature options configuration file.
    - \b GCC/mt7687_flash.ld:   Linker script.
    - \b GCC/startup_mt7687.s:  MT7697 startup file.
    - \b GCC/syscalls.c:        MT7697 syscalls implementation.
  - Project configuration files using Keil IDE.
    - \b MDK-ARM/RTE/Device/7687_32M_MXIC.FLM.
    - \b MDK-ARM/RTE/Device/flash.ini.
    - \b MDK-ARM/RTE/RTE_Components.h.
    - \b MDK-ARM/flash.sct:        Scatter file.
    - \b MDK-ARM/iot_sdk.uvprojx:  uVision5 Project File. Contains the project
                                   structure in XML format.
    - \b MDK-ARM/startup_mt7687.s:
                                   MT7697 startup file.
  - Project configuration files using IAR.
    - \b EWARM/flash.icf:         Linker configuration file.
    - \b EWARM/iot_sdk.ewd:       Debugger settings file.
    - \b EWARM/iot_sdk.ewp:       Project file
    - \b EWARM/iot_sdk.ewt:       C-STAT and C-RUN settings.
    - \b EWARM/iot_sdk.eww:       Workspace file.
    - \b EWARM/startup_mt7687.s:  MT7697 startup file.

@par Run the application
  - Build the example project with the command "./build.sh mt7697_hdk
    iot_sdk" from the SDK root folder and download the binary file to the
    LinkIt 7697 development board.
  - Reboot the HDK, the console will show "FreeRTOS Running" message to
    indicate the HDK is booting up.
  - Use '?' and enter to query the available command line options. Note that
    the command line options are still under development and subject to
    change without notice.
  - Reference applications run the LinkIt 7697 HDK in Wi-Fi station and
    access point modes and connect the HDK with nearby Bluetooth LE enabled
    devices.
  - Example 1. Wi-Fi station mode.
    - Find your Wi-Fi access point settings: Before connecting to a Wi-Fi
      access point, the following information needs to be collected: 1. The
      SSID of your Wi-Fi access point. 2. The authentication mode of your Wi-
      Fi access point. In general, the authentication mode is WPA PSK or WPA2
      PSK. To change the mode, please refer to Table 1 for the list of
      supported authentication modes. 3. The password of your Wi-Fi access
      point. 4. The encryption mode of your Wi-Fi access point. In general,
      AES or TKIP is used. To change the mode, please refer to Table 2 for
      the list of supported encryption modes.
    - Once the information is collected, use the following commands to
      configure the LinkIt 7697 HDK. The example code in main.c assumes
      either WPA PSK or WPA2 PSK is used for authentication, TKIP or AES for
      encryption, 'myhome' (length 6) for the SSID, and the password of the
      WPA or WPA2 is '12345678' (length 8).
      \code
      config write STA AuthMode 9
      config write STA EncrypType 8
      config write STA Ssid myhome
      config write STA SsidLen 6
      config write STA WpaPsk 12345678
      config write STA WpaPskLen 8
      config write STA WirelessMode 5
      config write common OpMode 1
      \endcode press the reset button on the LinkIt 7697 HDK to restart the system.
    - Boot up with the new configuration. If everything is correct, similar
      messages will be shown in the console to notify your HDK has received
      an IP address.
      \code
      ************************
      DHCP got IP:10.10.10.101
      ************************
      \endcode
    - PING from the LinkIt 7697 HDK (SDK v3.1.0) If the IP address is fetched
      and the network is operating, the LinkIt 7697 can ping other devices on
      the network with the following command in the console.
      \code
      f 11 10.10.10.254 3 64
      \endcode The ping stops after sending three packets to 10.10.10.254. The ping usage is: f 11 <ip address> <times> <ping packet length>
    - Wi-Fi configuration options for AuthMode and EncrypType.
      \code
      +---+-------------------------------------+
      | 0 | open, no security                   |
      +---+-------------------------------------+
      | 4 | WPA PSK                             |
      +---+-------------------------------------+
      | 7 | WPA2 PSK                            |
      +---+-------------------------------------+
      | 9 | Support both WPA and WPA2 PSK       |
      +---+-------------------------------------+
      Table 1. Supported AuthMode(s)
      +---+------------------------+
      | 0 | WEP                    |
      +---+------------------------+
      | 1 | No encryption          |
      +---+------------------------+
      | 4 | TKIP                   |
      +---+------------------------+
      | 6 | AES                    |
      +---+------------------------+
      | 8 | Support TKIP and AES   |
      +---+------------------------+
      Table 2. Supported EncrypType(s)
      \endcode
  - Example 2. Wi-Fi access point mode.
    - Provide the Wi-Fi access point settings:
      - SSID
      - Authentication Mode
      - Encryption Type
      - Password
    - Once the information is collected, use the following commands to
      configure the LinkIt 7697 HDK. This example assumes WPA2 PSK is used
      for authentication, AES for encryption, 'iot_ap' (length 6) for the
      SSID, and the password of the WPA2 is '87654321' (length 8).
      \code
      config write AP Ssid iot_ap
      config write AP SsidLen 6
      config write AP AuthMode 7
      config write AP EncrypType 6
      config write AP WpaPsk 87654321
      config write AP WpaPskLen 8
      config write common OpMode 2
      \endcode
    - Press the reset button on the LinkIt 7697 HDK to restart the system.
    - Use a handheld device or a laptop computer to connect to the access
      point 'iot_ap'. In the development board's console, the IP address
      assigned to the handheld device or laptop is shown below.
      \code
      [DHCPD:DBG]lease_ip:10.10.10.2
      \endcode
  - Example 3. Connect to a Bluetooth LE device.
    - Use the command "log set BT on info", "log set BTMM on info", "log set
      BTHCI on info" and "log set BTL2CAP on info" to enable the BT system
      log.
    - Use the command 'ble ?' and enter to query the available Bluetooth
      command line options.
    - Input the command "ble gap start_scan 0 0024 0011 1 0" in the serial
      tool to scan for the nearby Bluetooth enabled devices.
      - 0, passive scan.
      - 0024, scan interval (36 * 0.625 ms). Two bytes long HEX value.
      - 0011, scan window (17 * 0.625 ms). Two bytes long HEX value.
      - 1, own address type, 1 means random address.
      - 0, filter policy. A similar log is written to the output:
        \code
        Find a device A, 
        [I][APP] BT_GAP_LE_ADVERTISING_REPORT_IND Success 
        [I][APP] ======================================== 
        [I][APP] Address:       [RANDOM] 73-2c-d4-3f-d3-b2
        [I][APP] Event Type:    ADV_IND
        [I][APP] AD Flags:      LE General Discoverable Mode
        [I][APP] RAW DATA=0x02011a14ff4c000100000000040000000000000000000000
        [I][APP] ========================================
        Find a device B,
        [I][APP] ========================================
        [I][APP] Address:       [RANDOM] ff-76-f0-01-a4-1a
        [I][APP] Event Type:    ADV_IND
        [I][APP] Complete Name: WeLoop B08 DEF4D4
        [I][APP] AD Flags:      LE Limited Discoverable Mode
        [I][APP] RAW DATA=0x120957654c6f6f702042303820444546344434031934120201050303e7fe
        [I][APP] ========================================
        \endcode
    - Connect the device with the command "ble gap connect 1 732cd43fd3b2".
      - 1, random address, based on the [RANDOM] tag. 0, public address based
        on the [PUBLIC] tag.
      - 732cd43fd3b2: remote device address. The output log indicates the
        connection is established with a remote device.
        \code
        [I][APP] BT_GAP_LE_CONNECT_IND Success
        [I][APP] connection handle=0x0200
        [I][APP] role=Master
        [I][APP] peer address:[RANDOM] 73-2c-d4-3f-d3-b2
        \endcode
*/
/**
 * @}
 * @}
 * @}
 */
